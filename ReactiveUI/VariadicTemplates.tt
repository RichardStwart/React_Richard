<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Disposables;
using System.Linq;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

namespace ReactiveUI
{
	public static class WhenAnyMixin 
	{
		<# for(int length=2; length <= 10; length++) { #>
		<# var templParams = Enumerable.Range(1, length).Select(x => "T" + x.ToString()); #>
		<# string selectorTypeParams = String.Join(", ", templParams.Select(x => String.Format("IObservedChange<TSender, {0}>", x))); #>
		<# string selectorCall = "selector(" + String.Join(", ", Enumerable.Range(1, length).Select(x => "islot" + x.ToString())) + ")"; #>

        public static IObservable<TRet> WhenAny<TSender, TRet, <#= String.Join(",", templParams) #>>(this TSender This, 
			<# for(int i=1; i <= length; i++) { #>
                Expression<Func<TSender, T<#=i#>>> property<#=i#>, 
			<# } #>
                Func<<#= selectorTypeParams #>, TRet> selector)
            where TSender : IReactiveNotifyPropertyChanged
        {
			<# for(int i=1; i <= length; i++) { #>

			var slot<#=i#> = new ObservedChange<TSender, T<#=i#>>() {
                Sender = This,
                PropertyName = String.Join(".", RxApp.expressionToPropertyNames(property<#=i#>)),
            };
            T<#=i#> slot<#=i#>Value = default(T<#=i#>); slot<#=i#>.TryGetValue(out slot<#=i#>Value); slot<#=i#>.Value = slot<#=i#>Value;
            IObservedChange<TSender, T<#=i#>> islot<#=i#> = slot<#=i#>;

			<# } #>

            return Observable.CreateWithDisposable<TRet>(subject => {
                subject.OnNext(<#= selectorCall #>);

                return Observable.Merge(<# for(int i=1; i <= length; i++) { #>

                    This.ObservableForProperty(property<#=i#>).Do(x => { lock (slot<#=i#>) { islot<#=i#> = x.fillInValue(); } }).Select(x => <#= selectorCall #>)<#= (i==length?"":",") #> <# } #>

                ).Subscribe(subject);
            });
        }

	<# } #>
	}
}